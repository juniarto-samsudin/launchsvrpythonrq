# Use an official Python runtime as a parent image
FROM python:3.10-alpine

# Set the working directory to /app
WORKDIR /app

# Install pipenv
RUN pip install --no-cache-dir pipenv

# Copy the Pipfile and Pipfile.lock to the container
COPY Pipfile Pipfile.lock /app/

# Install dependencies using Pipenv
# --system: Installs packages globally, not just in a virtual environment
# --deploy: Ensures Pipfile.lock matches the environment
RUN pipenv install --system --deploy

# Copy worker.py to the container
COPY worker.py /app/
#COPY tasks2.py /app/
#COPY tasks3.py /app/
#COPY tasksmpyc.py /app/

EXPOSE 5000

CMD ["python", "worker.py"]




# Create /app/logs and /app/uploads directories
#RUN mkdir -p /app/logs /app/uploads

# Copy the current directory contents into the container at /app
#COPY . /app

# Install any needed packages specified in requirements.txt
#RUN pip install --no-cache-dir flask
#RUN pip install --no-cache-dir -r requirements.txt

# Make port 5000 available to the world outside this container
#EXPOSE 5000

# Define environment variable
#ENV FLASK_APP=app.py
#ENV FLASK_RUN_HOST=0.0.0.0
# COMMENT OUT THE LINE BELOW TO RUN IN PRODUCTION
# ENV FLASK_ENV=development 
# ENV FLASK_DEBUG=1

# Run app.py when the container launches
#CMD ["flask", "run"]
#CMD ["gunicorn", "--config", "gunicorn_config.py", "app:app"]
